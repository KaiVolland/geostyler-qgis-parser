{"version":3,"file":"QGISStyleParser.js","sourceRoot":"","sources":["../src/QGISStyleParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Filter,\n  StyleParser,\n  Style,\n  Rule,\n  ScaleDenominator,\n  PointSymbolizer,\n  Symbolizer,\n  IconSymbolizer,\n  LineSymbolizer,\n  MarkSymbolizer,\n  FillSymbolizer,\n  TextSymbolizer,\n  WriteStyleResult,\n  ReadStyleResult,\n  isGeoStylerFunction\n} from 'geostyler-style';\n\nimport { CqlParser } from 'geostyler-cql-parser';\nimport Color from 'color';\n\nimport {\n  parseString,\n  Builder\n} from 'xml2js';\n\nconst get = (obj: any, path: any, defaultValue = undefined) => {\n  const travel = (regexp: RegExp) =>\n    String.prototype.split\n      .call(path, regexp)\n      .filter(Boolean)\n      .reduce((res: any, key: any) => (res !== null && res !== undefined ? res[key] : res), obj);\n  const result = travel(/[,[\\]]+?/) || travel(/[,[\\].]+?/);\n  return result === undefined || result === obj ? defaultValue : result;\n};\n\ntype SymbolizerMap = {\n  [key: string]: Symbolizer[];\n};\n\ntype LabelMap = {\n  [filter: string]: TextSymbolizer[];\n};\n\ntype QmlProp = {\n  $: {\n    k: any;\n    v: any;\n  };\n};\n\ntype QmlRule = {\n  $: {\n    filter?: string;\n    scalemaxdenom?: number;\n    scalemindenom?: number;\n    symbol: string;\n    key: string;\n    label: string;\n  };\n};\n\ntype QmlCategory = {\n  $: {\n    label: string;\n    render: string;\n    symbol: string;\n    value: string;\n  };\n};\n\ntype QmlRange = {\n  $: {\n    upper: string;\n    lower: string;\n    label: string;\n    symbol: string;\n    render: string;\n  };\n};\n\nexport const outlineStyleDashArrays = {\n  dot: [2, 2],\n  dash: [10, 2]\n};\n\nconst AnchorMap = {\n  left: 'L',\n  right: 'R',\n  top: 'T',\n  bottom: 'B',\n  'top-left': 'TL',\n  'top-right': 'TR',\n  'bottom-left': 'BL',\n  'bottom-right': 'BR'\n};\n\n/**\n * This parser can be used with the GeoStyler.\n * It implements the GeoStyler-Style StyleParser interface.\n *\n * @class QGISStyleParser\n * @implements StyleParser\n */\nexport class QGISStyleParser implements StyleParser {\n\n  cqlParser = new CqlParser();\n\n  /**\n   * The name of the QGIS Style Parser.\n   */\n  public static title = 'QGIS Style Parser';\n\n  title = 'QGIS Style Parser';\n\n  /**\n   * The readStyle implementation of the GeoStyler-Style StyleParser interface.\n   * It reads a QML as a string and returns a Promise containing the\n   * GeoStyler-Style Style.\n   *\n   * @param {string} qmlString A QML as a string.\n   * @return {Promise} The Promise resolving with the GeoStyler-Style Style\n   */\n  readStyle(qmlString: string): Promise<ReadStyleResult> {\n    return new Promise<ReadStyleResult>(resolve => {\n      const options = {};\n      try {\n        parseString(qmlString, options, (err: any, result: any) => {\n          if (err) {\n            resolve({\n              errors: [err]\n            });\n          }\n          const geoStylerStyle: Style = this.qmlObjectToGeoStylerStyle(result);\n          resolve({\n            output: geoStylerStyle\n          });\n        });\n      } catch (error) {\n        resolve({\n          errors: [error]\n        });\n      }\n    });\n  }\n\n  /**\n   *\n   * @param qmlLabel\n   */\n  parseLabelTemplates(qmlLabel: string): string {\n    let geostylerLabel: string = '';\n    const qmlLabelArray = qmlLabel.split('||');\n\n    qmlLabelArray.forEach((part: string) => {\n      const singleQuotedText = part.match(/[']([^']+)[']/);\n      if (singleQuotedText) {\n        geostylerLabel += singleQuotedText[1];\n      } else {\n        geostylerLabel += `{{${part.trim()}}}`;\n      }\n    });\n\n    return geostylerLabel;\n  }\n\n  /**\n   *\n   * @param qmlSymbolizer\n   */\n  qmlSymbolizerLayerPropsToObject(qmlSymbolizer: any) {\n    const qmlMarkerProps: any = {};\n    qmlSymbolizer.prop.forEach((prop: QmlProp) => {\n      const key = prop.$.k;\n      const value = prop.$.v;\n      qmlMarkerProps[key] = value;\n    });\n    return qmlMarkerProps;\n  }\n\n  /**\n   * Get the GeoStyler-Style Style from an QML Object (created with xml2js).\n   *\n   * @param {object} qmlObject The QML object representation (created with xml2js)\n   * @return {Style} The GeoStyler-Style Style\n   */\n  qmlObjectToGeoStylerStyle(qmlObject: object): Style {\n    const rules = this.getRulesFromQmlObject(qmlObject);\n    return {\n      name: 'QGIS Style',\n      rules\n    };\n  }\n\n  /**\n   *\n   * @param hex\n   * @param opacity\n   */\n  qmlColorFromHexAndOpacity(hex?: string, opacity?: number): string | undefined {\n    opacity = Number.isNaN(Number(opacity)) ? 1 : opacity;\n    const colorArray = Color(hex).alpha(opacity || 1).rgb().array();\n    const alpha = colorArray[3] === undefined || isNaN(colorArray[3]) ? 255\n      : colorArray[3] === 0 ? 0\n        : 255 * colorArray[3];\n    const color = `${colorArray[0]},${colorArray[1]},${colorArray[2]},${Math.round(alpha)}`;\n\n    return color;\n  }\n\n  /**\n   *\n   * @param color\n   */\n  qmlColorToOpacity(color: string): number {\n    const colorArray = color.split(',');\n    const opacity = parseFloat(colorArray[3]) / 255;\n    return Math.round(opacity * 100) / 100;\n  }\n\n  /**\n   *\n   * @param color\n   */\n  qmlColorToHex(qmlColor: string): string {\n    const colorArray = qmlColor.split(',');\n    const color = Color(`rgb(${colorArray[0]},${colorArray[1]},${colorArray[2]})`);\n    return color.hex();\n  }\n\n  /**\n   * Get the GeoStyler-Style Rule from an QML Object (created with xml2js).\n   *\n   * @param {object} qmlObject The QML object representation (created with xml2js)\n   * @return {Rule} The GeoStyler-Style Rule\n   */\n  getRulesFromQmlObject(qmlObject: any): Rule[] {\n    const qmlRenderer = get(qmlObject, 'qgis.renderer-v2.[0]');\n    const qmlRules: QmlRule[] = get(qmlRenderer, 'rules[0].rule');\n    const qmlCategories: QmlCategory[] = get(qmlRenderer, 'categories[0].category');\n    const qmlRanges: QmlRange[] = get(qmlRenderer, 'ranges[0].range');\n    const qmlSymbols = get(qmlRenderer, 'symbols[0].symbol');\n    const qmlLabeling = get(qmlObject, 'qgis.labeling.[0]');\n    let rules: Rule[] = [];\n    let symbolizerMap: SymbolizerMap = {};\n    let labelMap: LabelMap = {};\n\n    if (Array.isArray(qmlSymbols)) {\n      symbolizerMap = this.parseQmlSymbolizers(qmlSymbols);\n    }\n\n    if (qmlLabeling) {\n      labelMap = this.parseQmlLabeling(qmlLabeling);\n    }\n\n    if (Array.isArray(qmlRules) && qmlRules.length > 0) {\n      qmlRules.forEach((qmlRule: QmlRule, index: number) => {\n        const filter: Filter | undefined = this.getFilterFromQmlRule(qmlRule);\n        const scaleDenominator: ScaleDenominator | undefined = this.getScaleDenominatorFromRule(qmlRule);\n        const name = qmlRule.$.label || qmlRule.$.filter;\n        let rule: Rule = <Rule> {\n          name\n        };\n        if (filter) {\n          rule.filter = filter;\n        }\n        if (scaleDenominator) {\n          rule.scaleDenominator = scaleDenominator;\n        }\n        if (Object.keys(symbolizerMap).length > 0 && symbolizerMap[qmlRule.$.symbol]) {\n          rule.symbolizers = symbolizerMap[qmlRule.$.symbol];\n        }\n        rules.push(rule);\n      });\n    } else if (Array.isArray(qmlCategories) && qmlCategories.length > 0) {\n      const attribute = get(qmlObject, 'qgis.renderer-v2.[0].$.attr');\n      qmlCategories.forEach((qmlCategory: QmlCategory, index: number) => {\n        const value = qmlCategory.$.value;\n        const filter = ['==', attribute, value];\n        const name = `${attribute} = ${value}`;\n        let rule: Rule = <Rule> {\n          name,\n          filter\n        };\n        if (symbolizerMap && symbolizerMap[qmlCategory.$.symbol]) {\n          rule.symbolizers = symbolizerMap[qmlCategory.$.symbol];\n        }\n        rules.push(rule);\n      });\n    } else if (Array.isArray(qmlRanges) && qmlRanges.length > 0) {\n      const attribute = get(qmlObject, 'qgis.renderer-v2.[0].$.attr');\n      qmlRanges.forEach((qmlRange: QmlRange, index: number) => {\n        const name = qmlRange.$.label;\n        const lower = qmlRange.$.lower;\n        const upper = qmlRange.$.upper;\n        const filter = [\n          '&&',\n          ['>=', attribute, lower],\n          ['<=', attribute, upper]\n        ]  ;\n        let rule: Rule = <Rule> {\n          name,\n          filter\n        };\n        if (symbolizerMap && symbolizerMap[qmlRange.$.symbol]) {\n          rule.symbolizers = symbolizerMap[qmlRange.$.symbol];\n        }\n        rules.push(rule);\n      });\n    } else {\n      const symbolizers = symbolizerMap[Object.keys(symbolizerMap)[0]] || [];\n      const labels = labelMap[Object.keys(labelMap)[0]] || [];\n      const rule: Rule = {\n        name: 'QGIS Simple Symbol',\n        symbolizers:  [\n          ...symbolizers,\n          ...labels\n        ]\n      };\n\n      try {\n        const filter = this.cqlParser.read(Object.keys(labelMap)[0]);\n        if (filter) {\n          rule.filter = filter as Filter;\n        }\n      } catch (e) {\n        // in the case of made up filters\n      }\n\n      rules.push(rule);\n    }\n\n    return rules;\n  }\n\n  /**\n   * Get the GeoStyler-Style Filter from an QML Rule.\n   *\n   * Currently only supports one Filter per Rule.\n   *\n   * @param {object} qmlRule The QML Rule\n   * @return {Filter} The GeoStyler-Style Filter\n   */\n  getFilterFromQmlRule(qmlRule: QmlRule): Filter | undefined {\n    const qmlFilter = get(qmlRule, '$.filter');\n    if (qmlFilter) {\n      return this.cqlParser.read(qmlFilter) as Filter;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the GeoStyler-Style ScaleDenominator from an QML Rule.\n   *\n   * @param {object} qmlRule The QML Rule\n   * @return {ScaleDenominator} The GeoStyler-Style ScaleDenominator\n   */\n  getScaleDenominatorFromRule(qmlRule: QmlRule): ScaleDenominator | undefined {\n    const maxScaleDenominator = get(qmlRule, '$.scalemaxdenom');\n    const minScaleDenominator = get(qmlRule, '$.scalemindenom');\n    let scaleDenominator: ScaleDenominator = <ScaleDenominator> {};\n    if (minScaleDenominator) {\n      scaleDenominator.min = Number(minScaleDenominator);\n    }\n    if (maxScaleDenominator) {\n      scaleDenominator.max = Number(maxScaleDenominator);\n    }\n\n    return (scaleDenominator.min || scaleDenominator.max)\n      ? scaleDenominator\n      : undefined;\n  }\n\n  /**\n   *\n   * @param qmlLabels\n   */\n  parseQmlLabeling(qmlLabeling: any): LabelMap {\n    const type = qmlLabeling.$.type;\n    const labelMap: LabelMap = {};\n\n    if (type === 'rule-based') {\n      const rules = get(qmlLabeling, 'rules[0].rule');\n      rules.forEach((rule: QmlRule, index: number) => {\n        const settings = get(rule, 'settings[0]');\n        const textSymbolizer = this.getTextSymbolizerFromLabelSettings(settings);\n        labelMap[rule.$.filter || index] = [textSymbolizer];\n      });\n    }\n    if (type === 'simple') {\n      const settings = get(qmlLabeling, 'settings[0]');\n      const textSymbolizer = this.getTextSymbolizerFromLabelSettings(settings);\n      labelMap.a = [textSymbolizer];\n    }\n\n    return labelMap;\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  getTextSymbolizerFromLabelSettings(settings: any): TextSymbolizer {\n    let textSymbolizer: TextSymbolizer = {\n      kind: 'Text',\n    } as TextSymbolizer;\n    const styleProperties = get(settings, 'text-style[0].$');\n    const placementProperties = get(settings, 'placement[0].$');\n\n    if (styleProperties.textColor) {\n      textSymbolizer.color = this.qmlColorToHex(styleProperties.textColor);\n    }\n    if (styleProperties.fieldName) {\n      // TODO parse fieldName templates like: \"'ID: ' || ID\"\n      textSymbolizer.label = this.parseLabelTemplates(styleProperties.fieldName);\n    }\n    if (styleProperties.fontSize) {\n      textSymbolizer.size = parseFloat(styleProperties.fontSize);\n    }\n    if (styleProperties.fontFamily) {\n      textSymbolizer.font = [styleProperties.fontFamily];\n    }\n    if (styleProperties.fontLetterSpacing && parseFloat(styleProperties.fontLetterSpacing) > 0) {\n      textSymbolizer.letterSpacing = parseFloat(styleProperties.fontLetterSpacing);\n    }\n    if (styleProperties.multilineHeight && parseFloat(styleProperties.multilineHeight) > 0) {\n      textSymbolizer.lineHeight = parseFloat(styleProperties.multilineHeight);\n    }\n    if (parseFloat(placementProperties.xOffset) > 0 || parseFloat(placementProperties.yOffset) > 0) {\n      textSymbolizer.offset = [\n        parseFloat(placementProperties.xOffset),\n        parseFloat(placementProperties.yOffset)\n      ];\n    }\n    return textSymbolizer;\n  }\n\n  /**\n   *\n   */\n  parseQmlSymbolizers(qmlSymbolizers: any[]): SymbolizerMap {\n    const symbolizerMap: SymbolizerMap = {};\n\n    qmlSymbolizers.forEach((qmlSymbolizer: any) => {\n      const symbolizerKey = get(qmlSymbolizer, '$.name');\n      const symbolizerType = get(qmlSymbolizer, '$.type');\n      let symbolizers;\n      switch (symbolizerType) {\n        case 'marker':\n          symbolizers = this.getPointSymbolizersFromQmlSymbolizer(qmlSymbolizer);\n          break;\n        case 'line':\n          symbolizers = this.getLineSymbolizersFromQmlSymbolizer(qmlSymbolizer);\n          break;\n        case 'fill':\n          symbolizers = this.getFillSymbolizerFromQmlSymbolizer(qmlSymbolizer);\n          break;\n        default:\n          throw new Error('Failed to parse SymbolizerKind from qmlSymbolizer');\n      }\n      symbolizerMap[symbolizerKey] = symbolizers;\n    });\n\n    return symbolizerMap;\n  }\n\n  /**\n   * Get the GeoStyler-Style PointSymbolizer from an QGIS Symbolizer.\n   *\n   * The opacity of the Symbolizer is taken from the <Graphic>.\n   *\n   * @param {object} qmlSymbolizer The QGIS Symbolizer\n   * @return {PointSymbolizer} The GeoStyler-Style PointSymbolizer\n   */\n  getPointSymbolizersFromQmlSymbolizer(qmlSymbolizer: any): PointSymbolizer[] {\n    return qmlSymbolizer.layer.map((symbolizerLayer: any) => {\n      const markerClass = symbolizerLayer.$.class;\n      switch (markerClass) {\n        case 'SimpleMarker':\n          return this.getPointSymbolizerFromMarkLayer(symbolizerLayer);\n        case 'SvgMarker':\n          return this.getPointSymbolizerFromSvgLayer(symbolizerLayer);\n        default:\n          throw new Error(`Failed to parse MarkerClass ${markerClass} from qmlSymbolizer`);\n      }\n    });\n  }\n\n  /**\n   * Get the GeoStyler-Style MarkSymbolizer from an QML Symbolizer\n   *\n   * @param {object} symbolizerLayer The QML SymbolizerLayer\n   * @return {MarkSymbolizer} The GeoStyler-Style MarkSymbolizer\n   */\n  getPointSymbolizerFromMarkLayer(symbolizerLayer: any): MarkSymbolizer {\n    let markSymbolizer: MarkSymbolizer = {\n      kind: 'Mark',\n    } as MarkSymbolizer;\n\n    const qmlMarkerProps: any = this.qmlSymbolizerLayerPropsToObject(symbolizerLayer);\n\n    markSymbolizer.wellKnownName = qmlMarkerProps.name;\n\n    if (qmlMarkerProps.color) {\n      markSymbolizer.opacity = this.qmlColorToOpacity(qmlMarkerProps.color);\n      markSymbolizer.color = this.qmlColorToHex(qmlMarkerProps.color);\n    }\n\n    if (qmlMarkerProps.angle) {\n      markSymbolizer.rotate = parseFloat(qmlMarkerProps.angle);\n    }\n    if (qmlMarkerProps.size) {\n      markSymbolizer.radius = parseFloat(qmlMarkerProps.size) / 2;\n    }\n    // TODO Fix in style declaration\n    // if (qmlMarkerProps.offset) {\n    //   markSymbolizer.offset = qmlMarkerProps.offset.split(',').map(parseFloat);\n    // }\n    if (qmlMarkerProps.outline_color) {\n      markSymbolizer.strokeOpacity = this.qmlColorToOpacity(qmlMarkerProps.outline_color);\n      markSymbolizer.strokeColor = this.qmlColorToHex(qmlMarkerProps.outline_color);\n    }\n    if (qmlMarkerProps.outline_width) {\n      markSymbolizer.strokeWidth = parseFloat(qmlMarkerProps.outline_width);\n    }\n\n    return markSymbolizer;\n  }\n\n  /**\n   * Get the GeoStyler-Style IconSymbolizer from an QML Symbolizer\n   *\n   * @param {object} qmlSymbolizer The QML Symbolizer\n   * @return {LineSymbolizer} The GeoStyler-Style LineSymbolizer\n   */\n  getLineSymbolizersFromQmlSymbolizer(qmlSymbolizer: any): LineSymbolizer[] {\n    const {\n      qmlSymbolizerLayerPropsToObject\n    } = this;\n    return qmlSymbolizer.layer.map((symbolizerLayer: any) => {\n      let lineSymbolizer: LineSymbolizer = {\n        kind: 'Line',\n      } as LineSymbolizer;\n\n      const qmlMarkerProps: any = qmlSymbolizerLayerPropsToObject(symbolizerLayer);\n\n      if (qmlMarkerProps.line_color) {\n        lineSymbolizer.opacity = this.qmlColorToOpacity(qmlMarkerProps.line_color);\n        lineSymbolizer.color = this.qmlColorToHex(qmlMarkerProps.line_color);\n      }\n      if (qmlMarkerProps.capstyle) {\n        lineSymbolizer.cap = qmlMarkerProps.capstyle;\n      }\n      if (qmlMarkerProps.joinstyle) {\n        lineSymbolizer.join = qmlMarkerProps.joinstyle;\n      }\n      if (qmlMarkerProps.customdash) {\n        lineSymbolizer.dasharray = qmlMarkerProps.customdash.split(';').map(parseFloat);\n      }\n      if (qmlMarkerProps.offset) {\n        lineSymbolizer.perpendicularOffset = parseFloat(qmlMarkerProps.offset);\n      }\n      if (qmlMarkerProps.line_width) {\n        lineSymbolizer.width = parseFloat(qmlMarkerProps.line_width);\n      }\n\n      return lineSymbolizer;\n    });\n  }\n\n  /**\n   * Get the GeoStyler-Style IconSymbolizer from an QML Symbolizer\n   *\n   * @param {object} qmlSymbolizer The QML Symbolizer\n   * @return {FillSymbolizer} The GeoStyler-Style FillSymbolizer\n   */\n  getFillSymbolizerFromQmlSymbolizer(qmlSymbolizer: any): FillSymbolizer[] {\n    const {\n      qmlSymbolizerLayerPropsToObject\n    } = this;\n    return qmlSymbolizer.layer.map((symbolizerLayer: any) => {\n      let fillSymbolizer: FillSymbolizer = {\n        kind: 'Fill',\n      } as FillSymbolizer;\n\n      const qmlMarkerProps: any = qmlSymbolizerLayerPropsToObject(symbolizerLayer);\n\n      let outlineStyle = qmlMarkerProps?.outline_style || 'solid';\n      if (qmlMarkerProps.outline_color && 'no' !== outlineStyle) {\n        fillSymbolizer.outlineColor = this.qmlColorToHex(qmlMarkerProps.outline_color);\n      }\n\n      let fillStyle = qmlMarkerProps?.style || 'solid';\n      if (qmlMarkerProps.color && 'solid' === fillStyle) {\n        fillSymbolizer.opacity = this.qmlColorToOpacity(qmlMarkerProps.color);\n        fillSymbolizer.color = this.qmlColorToHex(qmlMarkerProps.color);\n      }\n\n      switch (outlineStyle) {\n        case 'dot':\n          fillSymbolizer.outlineDasharray = outlineStyleDashArrays.dot;\n          break;\n        case 'dash':\n          fillSymbolizer.outlineDasharray = outlineStyleDashArrays.dash;\n          break;\n        case 'dash dot':\n          fillSymbolizer.outlineDasharray = [\n            ...outlineStyleDashArrays.dash,\n            ...outlineStyleDashArrays.dot\n          ];\n          break;\n        case 'dash dot dot':\n          fillSymbolizer.outlineDasharray = [\n            ...outlineStyleDashArrays.dash,\n            ...outlineStyleDashArrays.dot,\n            ...outlineStyleDashArrays.dot\n          ];\n          break;\n        default:\n          break;\n      }\n\n      if (qmlMarkerProps.outline_width && 'no' !== outlineStyle) {\n        fillSymbolizer.outlineWidth = parseFloat(qmlMarkerProps.outline_width);\n      }\n\n      return fillSymbolizer;\n    });\n  }\n\n  /**\n   * Get the GeoStyler-Style IconSymbolizer from an QML Symbolizer\n   *\n   * @param {object} symbolizerLayer The QML Symbolizer Layer\n   * @return {IconSymbolizer} The GeoStyler-Style IconSymbolizer\n   */\n  getPointSymbolizerFromSvgLayer(symbolizerLayer: any): IconSymbolizer {\n    let iconSymbolizer: IconSymbolizer = {\n      kind: 'Icon',\n    } as IconSymbolizer;\n\n    const qmlMarkerProps: any = this.qmlSymbolizerLayerPropsToObject(symbolizerLayer);\n\n    if (qmlMarkerProps.color) {\n      const colorArray = qmlMarkerProps.color.split(',');\n      iconSymbolizer.opacity = parseFloat(colorArray[3]) / 255;\n      const color = Color(`rgb(${colorArray[0]},${colorArray[1]},${colorArray[2]})`);\n      iconSymbolizer.color = color.hex();\n    }\n\n    if (qmlMarkerProps.angle) {\n      iconSymbolizer.rotate = parseFloat(qmlMarkerProps.angle);\n    }\n    if (qmlMarkerProps.size) {\n      iconSymbolizer.size = parseFloat(qmlMarkerProps.size);\n    }\n    if (qmlMarkerProps.offset) {\n      const offsetArray = qmlMarkerProps.offset.split(',').map(parseFloat);\n      if (offsetArray[0] > 0 || offsetArray[1] > 0) {\n        iconSymbolizer.offset = qmlMarkerProps.offset.split(',').map(parseFloat);\n      }\n    }\n    if (qmlMarkerProps.name) {\n      iconSymbolizer.image = qmlMarkerProps.name;\n    }\n\n    return iconSymbolizer;\n  }\n\n  /**\n   * The writeStyle implementation of the GeoStyler-Style StyleParser interface.\n   * It reads a GeoStyler-Style Style and returns a Promise containing\n   * the QML string.\n   *\n   * @param {Style} geoStylerStyle A GeoStyler-Style Style.\n   * @return {Promise} The Promise resolving with the QML.\n   */\n  writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<string>> {\n    return new Promise<WriteStyleResult<string>>(resolve => {\n      try {\n        const builder = new Builder();\n        const qmlObject = this.geoStylerStyleToQmlObject(geoStylerStyle);\n        this.convertTextSymbolizers(qmlObject, geoStylerStyle);\n        const qmlString = builder\n          .buildObject(qmlObject)\n          .replace(\n            '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>',\n            '<!DOCTYPE qgis PUBLIC \\'http://mrcc.com/qgis.dtd\\' \\'SYSTEM\\'>'\n          );\n        resolve({\n          output: qmlString\n        });\n      } catch (error) {\n        resolve({\n          errors: [error]\n        });\n      }\n    });\n  }\n\n  /**\n   *\n   * @param filter\n   */\n  getQmlFilterFromFilter(filter: Filter): string | undefined {\n    return this.cqlParser.write(filter) as string;\n  }\n\n  /**\n   *\n   */\n  getQmlRuleFromRule(rule: Rule, index: number) {\n    const filter = rule.filter;\n    const qmlRule: any = {\n      $: {\n        key: `renderer_rule_${index}`,\n        symbol: `${index}`,\n        label: rule.name\n      }\n    };\n    if (rule.scaleDenominator) {\n      if (rule.scaleDenominator.min) {\n        qmlRule.$.scalemindenom = rule.scaleDenominator.min;\n      }\n      if (rule.scaleDenominator.max) {\n        qmlRule.$.scalemaxdenom = rule.scaleDenominator.max;\n      }\n    }\n    if (filter) {\n      const cqlFilter = this.getQmlFilterFromFilter(filter);\n      if (cqlFilter) {\n        qmlRule.$.filter = this.getQmlFilterFromFilter(filter);\n      }\n    }\n    return qmlRule;\n  }\n\n  /**\n   *\n   * @param geostylerStyle\n   */\n  getQmlSymbolsFromStyle(geostylerStyle: Style, rules: any[]): any[] {\n    return geostylerStyle.rules.map((rule, index) => {\n      const symbol = this.getQmlSymbolFromRule(rule, index);\n      if (symbol) {\n        rules.push(this.getQmlRuleFromRule(rule, index));\n      }\n      return symbol;\n    }).filter(s => s);\n  }\n\n  /**\n   *\n   * @param rule\n   */\n  getQmlSymbolFromRule(rule: Rule, index: number): any {\n    const layer = this.getQmlLayersFromRule(rule);\n    let type;\n    if (!rule.symbolizers.length) {\n      return;\n    }\n    switch (rule.symbolizers[0].kind) {\n      case 'Line':\n        type = 'line';\n        break;\n      case 'Fill':\n        type = 'fill';\n        break;\n      default:\n        type = 'marker';\n    }\n    return layer && layer[0] ? {\n      $: {\n        type,\n        name: index.toString()\n      },\n      layer\n    } : undefined;\n  }\n\n  /**\n   *\n   */\n  getQmlLineSymbolFromSymbolizer(symbolizer: LineSymbolizer): any {\n    let lineColor;\n    if (!isGeoStylerFunction(symbolizer.color) && !isGeoStylerFunction(symbolizer.opacity)) {\n      lineColor = this.qmlColorFromHexAndOpacity(symbolizer.color, symbolizer.opacity);\n    }\n\n    const qmlProps: any = {\n      line_color: lineColor,\n      offset: symbolizer.perpendicularOffset,\n      offset_map_unit_scale: '3x:0,0,0,0,0,0',\n      offset_unit: 'Pixel',\n      joinstyle: symbolizer.join,\n      capstyle: symbolizer.cap,\n      line_width: symbolizer.width,\n      line_width_unit: 'Pixel'\n    };\n    if (symbolizer.dasharray) {\n      qmlProps.customdash = symbolizer.dasharray.join(';');\n    }\n\n    return {\n      $: {\n        class: 'SimpleLine'\n      },\n      prop: this.propsObjectToQmlSymbolProps(qmlProps)\n    };\n  }\n\n  getQmlFillSymbolFromSymbolizer(symbolizer: FillSymbolizer): any {\n    const fillOpacity = symbolizer.fillOpacity !== undefined ? symbolizer.fillOpacity : symbolizer.opacity;\n    const outlineOpacity = symbolizer.outlineOpacity !== undefined ? symbolizer.outlineOpacity : symbolizer.opacity;\n    let color;\n    if (!isGeoStylerFunction(symbolizer.color) && !isGeoStylerFunction(fillOpacity)) {\n      color = this.qmlColorFromHexAndOpacity(symbolizer.color, fillOpacity);\n    }\n    let outlineColor;\n    if (!isGeoStylerFunction(symbolizer.outlineColor) && !isGeoStylerFunction(outlineOpacity)) {\n      outlineColor = this.qmlColorFromHexAndOpacity(symbolizer.outlineColor, outlineOpacity);\n    }\n\n    const qmlProps = {\n      color: color,\n      offset_map_unit_scale: '3x:0,0,0,0,0,0',\n      offset_unit: 'Pixel',\n      outline_style: symbolizer.outlineDasharray ? 'dash' : 'solid',\n      outline_width: symbolizer.outlineWidth || '0',\n      outline_width_map_unit_scale: '3x:0,0,0,0,0,0',\n      outline_width_unit: 'Pixel',\n      customdash: symbolizer.outlineDasharray ? symbolizer.outlineDasharray.join(';') : undefined,\n      outline_color: outlineColor\n    };\n\n    return {\n      $: {\n        class: 'SimpleFill'\n      },\n      prop: this.propsObjectToQmlSymbolProps(qmlProps)\n    };\n  }\n\n  /**\n   *\n   * @param rule\n   */\n  getQmlLayersFromRule(rule: Rule): any {\n    const symbolizers = rule.symbolizers.map(this.getQmlLayerFromSymbolizer.bind(this)).filter(s => s);\n    return symbolizers.length ? symbolizers : undefined;\n  }\n\n  /**\n   *\n   * @param symbolizer\n   */\n  getQmlLayerFromSymbolizer(symbolizer: Symbolizer): any {\n    switch (symbolizer.kind) {\n      case 'Fill':\n        return this.getQmlFillSymbolFromSymbolizer(symbolizer as FillSymbolizer);\n      case 'Icon':\n        return this.getQmlMarkSymbolFromIconSymbolizer(symbolizer as IconSymbolizer);\n      case 'Line':\n        return this.getQmlLineSymbolFromSymbolizer(symbolizer as LineSymbolizer);\n      case 'Mark':\n        return this.getQmlMarkSymbolFromSymbolizer(symbolizer as MarkSymbolizer);\n      default:\n        break;\n    }\n  }\n\n  getQmlMarkSymbolFromIconSymbolizer(symbolizer: IconSymbolizer): any {\n    let color;\n    if (!isGeoStylerFunction(symbolizer.color) && !isGeoStylerFunction(symbolizer.opacity)) {\n      color = this.qmlColorFromHexAndOpacity(symbolizer.color, symbolizer.opacity);\n    }\n    const qmlProps = {\n      angle: symbolizer.rotate || 0,\n      color: color,\n      name: symbolizer.image,\n      size: symbolizer.size,\n      size_map_unit_scale: '3x:0,0,0,0,0,0',\n      size_unit: 'Pixel'\n    };\n\n    return {\n      $: {\n        class: 'SvgMarker'\n      },\n      prop: this.propsObjectToQmlSymbolProps(qmlProps)\n    };\n  }\n\n  /**\n   *\n   */\n  getQmlMarkSymbolFromSymbolizer(symbolizer: MarkSymbolizer): any {\n    let color;\n    if (!isGeoStylerFunction(symbolizer.color) && !isGeoStylerFunction(symbolizer.opacity)) {\n      color = this.qmlColorFromHexAndOpacity(symbolizer.color, symbolizer.opacity);\n    }\n    let outlineColor;\n    if (!isGeoStylerFunction(symbolizer.strokeColor) && !isGeoStylerFunction(symbolizer.strokeOpacity)) {\n      outlineColor = this.qmlColorFromHexAndOpacity(symbolizer.strokeColor, symbolizer.strokeOpacity);\n    }\n    let size;\n    if (!isGeoStylerFunction(symbolizer.radius)) {\n      size = symbolizer.radius ? symbolizer.radius * 2 : undefined;\n    }\n    const qmlProps = {\n      angle: symbolizer.rotate || 0,\n      color: color,\n      name: symbolizer.wellKnownName.toLowerCase(),\n      outline_color: outlineColor,\n      outline_style: 'solid',\n      outline_width: symbolizer.strokeWidth || 0,\n      outline_width_map_unit_scale: '3x:0,0,0,0,0,0',\n      outline_width_unit: 'Pixel',\n      size: size,\n      size_map_unit_scale: '3x:0,0,0,0,0,0',\n      size_unit: 'Pixel'\n    };\n\n    return {\n      $: {\n        class: 'SimpleMarker'\n      },\n      prop: this.propsObjectToQmlSymbolProps(qmlProps)\n    };\n  }\n\n  /**\n   *\n   * @param properties\n   */\n  propsObjectToQmlSymbolProps(properties: any): QmlProp[] {\n    return Object.keys(properties).map(k => {\n      const v = properties[k];\n      return {\n        $: {\n          k,\n          v\n        }\n      };\n    }).filter(s => s.$.v !== undefined);\n  }\n\n  /**\n   * Get the QML Object (readable with xml2js) from an GeoStyler-Style Style\n   *\n   * @param {Style} geoStylerStyle A GeoStyler-Style Style.\n   * @return {object} The object representation of a QML Style (readable with xml2js)\n   */\n  geoStylerStyleToQmlObject(geoStylerStyle: Style): any {\n    const type: string = 'RuleRenderer';\n    const rules: any[] = [];\n    const symbols: any[] = this.getQmlSymbolsFromStyle(geoStylerStyle, rules);\n    if (rules.length > 0 || symbols.length > 0) {\n      return {\n        qgis: {\n          $: {},\n          'renderer-v2': [{\n            $: {\n              type\n            },\n            rules: [{\n              $: {\n                key: 'renderer_rules'\n              },\n              rule: rules\n            }],\n            symbols: [{\n              symbol: symbols\n            }]\n          }]\n        }\n      };\n    } else {\n      return {\n        qgis: {\n          $: {},\n          'renderer-v2': [{\n            $: {\n              type: 'nullSymbol'\n            }\n          }]\n        }\n      };\n    }\n  }\n\n  convertTextSymbolizerRule(qmlRuleList: any[], rule: Rule) {\n    let textSymbolizer: TextSymbolizer;\n    rule.symbolizers.forEach(symbolizer => {\n      if (symbolizer.kind === 'Text') {\n        textSymbolizer = symbolizer as TextSymbolizer;\n        let textColor;\n        let predefinedPositionOrder;\n        if (textSymbolizer.color && !isGeoStylerFunction(textSymbolizer.color)) {\n          textColor = this.qmlColorFromHexAndOpacity(textSymbolizer.color, 1);\n        }\n        const textStyleAttributes: any = {\n          fontSize: textSymbolizer.size || 12,\n          fontLetterSpacing: textSymbolizer.letterSpacing || 0,\n          multilineHeight: textSymbolizer.lineHeight !== undefined ? textSymbolizer.lineHeight : 1,\n          textColor: textSymbolizer.color ? textColor : '0,0,0,255'\n        };\n        if (textSymbolizer.font) {\n          textStyleAttributes.fontFamily = textSymbolizer.font[0];\n        }\n        if (textSymbolizer.label && !isGeoStylerFunction(textSymbolizer.label )) {\n          textStyleAttributes.fieldName = textSymbolizer.label.replace('{{', '').replace('}}', '');\n        }\n        if (\n          textSymbolizer.anchor\n          && !isGeoStylerFunction(textSymbolizer.anchor)\n          && textSymbolizer.anchor !== 'center'\n        ) {\n          predefinedPositionOrder = AnchorMap[textSymbolizer.anchor];\n        } else {\n          predefinedPositionOrder = 'TR,TL,BR,BL,R,L,TSR,BSR';\n        }\n        const textRule: any = {\n          $: {\n            key: `labeling_rule_${qmlRuleList.length}`\n          },\n          settings: [{\n            'text-style': [{\n              $: textStyleAttributes\n            }],\n            placement: [{\n              $: {\n                predefinedPositionOrder,\n                xOffset: textSymbolizer.offset ? `${textSymbolizer.offset[0]}` : '0',\n                yOffset: textSymbolizer.offset ? `${textSymbolizer.offset[1]}` : '0',\n                rotationAngle: textSymbolizer.rotate ? textSymbolizer.rotate : '0'\n              }\n            }]\n          }]\n        };\n\n        if (textSymbolizer.haloColor) {\n          let bufferColor;\n          if (!isGeoStylerFunction(textSymbolizer.haloColor) && !isGeoStylerFunction(textSymbolizer.haloOpacity)) {\n            bufferColor = this.qmlColorFromHexAndOpacity(textSymbolizer.haloColor, textSymbolizer.haloOpacity);\n          }\n          textRule.settings[0]['text-buffer'] = [{\n            $: {\n              bufferSize: textSymbolizer.haloWidth || '0',\n              bufferColor: bufferColor,\n              bufferDraw: 1,\n              bufferSizeUnits: 'Pixel',\n              bufferSizeMapUnitScale: '3x:0,0,0,0,0,0'\n            }\n          }];\n        }\n\n        if (rule.filter) {\n          textRule.$.filter = this.cqlParser.write(rule.filter);\n        }\n\n        qmlRuleList.push(textRule);\n      }\n    });\n  }\n\n  convertTextSymbolizers(qmlObject: any, geoStylerStyle: Style): any {\n    const textSymbolizerRules: Rule[] = [];\n    geoStylerStyle.rules.forEach(rule => {\n      rule.symbolizers.forEach(symbolizer => {\n        if (symbolizer.kind === 'Text' && !textSymbolizerRules.includes(rule)) {\n          textSymbolizerRules.push(rule);\n        }\n      });\n    });\n    if (textSymbolizerRules.length > 0) {\n      qmlObject.qgis.labeling = [{\n        $: {\n          type: 'rule-based'\n        },\n        rules: [{\n          $: {\n            key: 'labeling_rules'\n          },\n          rule: []\n        }]\n      }];\n      textSymbolizerRules.forEach(rule =>\n        this.convertTextSymbolizerRule(qmlObject.qgis.labeling[0].rules[0].rule, rule));\n    }\n  }\n\n}\n\nexport default QGISStyleParser;\n"]}